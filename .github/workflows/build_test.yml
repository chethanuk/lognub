name: BuildAndTest

on:
  push:
    branches:
      - master
      - '!release*'
  pull_request:
    branches:
      - master
      - '!release*'
jobs:
  build:
    name: "BuildTest with Python ${{ matrix.python-version }} in OS ${{ matrix.os }}"
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8, 3.9]
        os: [ "ubuntu-20.04", "macos-latest" ]
    runs-on: ${{ matrix.os }}
    env:
      GITHUB_PREV_SHA: ${{ github.event.before }}
      PYTHON_VERSION: ${{ matrix.python-version }}
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Setup Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      # Setup Python
      - name: Install Poetry
        uses: snok/install-poetry@v1.3.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Check Python ${{ matrix.python-version }} version
        run: python -V

      - name: Check Disk Size before Cache
        run: |
          df -hm

      # load cached venv if cache exists
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3.0.11
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Check Disk Size before Build
        run: |
          df -hm

      # Install dependencies if cache does not exist
      - name: Install poetry dependencies if no cache hit
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Show poetry dependencies if cache hit
        if: steps.cached-poetry-dependencies.outputs.cache-hit == 'true'
        run: |
          echo "Packages already installed, printing the information about packages:"
          poetry show

      - name: Install the lognub package
        id: install_package
        if: always()
        run: poetry install --no-interaction --no-root

      - name: Check and Verify the information about packages.
        id: verify_packages
        # if: steps.install_package.outputs.result == 'success'
        run: |
          poetry show
          echo "Printing the version of package:"
          poetry version

      # Run Tests
      # # python -m pytest -n auto --reruns 3 --reruns-delay 5
      - name: Run tests
        id: run_tests
        # if: steps.verify_packages.outputs.result == 'success'
        run: |
          # source .venv/bin/activate
          # python -m pytest

          poetry run coverage run -m pytest --reruns 5 --reruns-delay 30
          poetry run coverage report
          poetry run coverage xml

      - name: Upload coverage to Codecov
        id: upload_cov
        # if: steps.run_tests.outputs.result == 'success'
        uses: codecov/codecov-action@v2.0.2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          # files: ./coverage*.xml
          # directory: ./
          flags: unittests
          env_vars: OS,PYTHON
          name: codecov-${{ matrix.os}}-python${{ matrix.python-version }}
          fail_ci_if_error: true
          # path_to_write_report: ./codecov_report.xml
          verbose: true

      - name: Check Disk Size after Build
        id: check_post_disk
        # if: steps.upload_cov.outputs.result == 'success'
        run: |
          df -hm
